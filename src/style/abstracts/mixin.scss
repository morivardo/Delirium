@use 'variables.scss';
@use 'sass:map';

@mixin glow-layering($type, $hue) {
  @if $type == box {
    & > .layer-0 {
      background-color: variables.$color-neutral-dark;
      z-index: 4;
    }

    & > .layer-1 {
      @if $hue == primary {
        background-color: rgba(variables.$color-primary-zeta, 30%);
      } @else if $hue == secondary {
        background-color: rgba(variables.$color-secondary-zeta, 30%);
      } @else if $hue == tertiary {
        background-color: rgba(variables.$color-tertiary-zeta, 30%);
      }

      border-radius: 5rem;
      filter: blur(1.17rem);
      z-index: 5;
    }

    & > .layer-2 {
      @if $hue == primary {
        border: solid 0.17rem variables.$color-primary-epsilon;
      } @else if $hue == secondary {
        border: solid 0.17rem variables.$color-secondary-epsilon;
      } @else if $hue == tertiary {
        border: solid 0.17rem variables.$color-tertiary-epsilon;
      }

      filter: blur(1.17rem);
      z-index: 6;
    }

    & > .layer-3 {
      @if $hue == primary {
        border: solid 0.22rem variables.$color-primary-epsilon;
      } @else if $hue == secondary {
        border: solid 0.22rem variables.$color-secondary-epsilon;
      } @else if $hue == tertiary {
        border: solid 0.22rem variables.$color-tertiary-epsilon;
      }

      filter: blur(0.39rem);
      z-index: 7;
    }

    & > .layer-4 {
      @if $hue == primary {
        border: solid 0.17rem rgba(variables.$color-primary-beta, 20%);
        box-shadow: 0 0.04rem 0.51rem variables.$color-primary-gamma,
          0 0.17rem 0.13rem rgba(variables.$color-primary-delta, 70%);
      } @else if $hue == secondary {
        border: solid 0.17rem rgba(variables.$color-secondary-beta, 20%);
        box-shadow: 0 0.04rem 0.51rem variables.$color-secondary-gamma,
          0 0.17rem 0.13rem rgba(variables.$color-secondary-delta, 70%);
      } @else if $hue == tertiary {
        border: solid 0.17rem rgba(variables.$color-tertiary-beta, 20%);
        box-shadow: 0 0.04rem 0.51rem variables.$color-tertiary-gamma,
          0 0.17rem 0.13rem rgba(variables.$color-tertiary-delta, 70%);
      }

      z-index: 8;

      &::before {
        box-shadow: inset -0.02rem 0.03rem 0.02rem rgba(#fff, 50%);
      }
    }

    & > .layer-5 {
      @if $hue == primary {
        border: solid 0.1rem variables.$color-primary-alpha;
      } @else if $hue == secondary {
        border: solid 0.1rem variables.$color-secondary-alpha;
      } @else if $hue == tertiary {
        border: solid 0.1rem variables.$color-tertiary-alpha;
      }

      filter: blur(0.03rem);
      z-index: 9;
    }
  } @else if $type == carousel {
    .icon {
      fill: none;
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      transition: linear 0.3s;

      &:first-child {
        fill: #fff;
        z-index: 3;
      }
    }

    .layer-0 {
      @if $hue == primary {
        background-color: rgba(variables.$color-primary-icon-eta, 30%);
      } @else if $hue == secondary {
        background-color: rgba(variables.$color-secondary-icon-eta, 30%);
      } @else if $hue == tertiary {
        background-color: rgba(variables.$color-tertiary-icon-eta, 30%);
      }

      filter: blur(0.63rem);
      z-index: 4;
    }

    .layer-1 {
      @if $hue == primary {
        stroke: variables.$color-primary-icon-zeta;
      } @else if $hue == secondary {
        stroke: variables.$color-secondary-icon-zeta;
      } @else if $hue == tertiary {
        stroke: variables.$color-tertiary-icon-zeta;
      }

      filter: blur(0.63rem);
      stroke-width: 1.6;
      z-index: 5;
    }

    .layer-2 {
      @if $hue == primary {
        stroke: variables.$color-primary-icon-epsilon;
      } @else if $hue == secondary {
        stroke: variables.$color-secondary-icon-epsilon;
      } @else if $hue == tertiary {
        stroke: variables.$color-tertiary-icon-epsilon;
      }

      filter: blur(0.21rem);
      stroke-width: 2.1;
      z-index: 6;
    }

    .layer-3 {
      @if $hue == primary {
        filter: drop-shadow(0 0.21rem 0.27rem variables.$color-primary-icon-gamma)
          drop-shadow(0 0.09rem 0.07rem rgba(variables.$color-primary-icon-delta, 70%));
        stroke: rgba(variables.$color-primary-icon-beta, 20%);
      } @else if $hue == secondary {
        filter: drop-shadow(0 0.21rem 0.27rem variables.$color-secondary-icon-gamma)
          drop-shadow(0 0.09rem 0.07rem rgba(variables.$color-secondary-icon-delta, 70%));
        stroke: rgba(variables.$color-secondary-icon-beta, 20%);
      } @else if $hue == tertiary {
        filter: drop-shadow(0 0.21rem 0.27rem variables.$color-tertiary-icon-gamma)
          drop-shadow(0 0.09rem 0.07rem rgba(variables.$color-tertiary-icon-delta, 70%));
        stroke: rgba(variables.$color-tertiary-icon-beta, 20%);
      }

      stroke-width: 1.6;
      z-index: 7;

      &::before {
        filter: drop-shadow(inset -0.01rem 0.02rem 0.01rem rgba(#fff, 50%));
      }
    }

    .layer-4 {
      @if $hue == primary or tertiary {
        stroke: variables.$color-primary-icon-alpha;
      } @else if $hue == secondary {
        stroke: variables.$color-secondary-icon-alpha;
      } @else if $hue == tertiary {
        stroke: variables.$color-tertiary-icon-alpha;
      }

      filter: blur(0.01rem);
      stroke-width: 1;
      z-index: 8;
    }

    .layer-5 {
      filter: blur(0.01rem);
      stroke: #fff;
      stroke-width: 0.5;
      z-index: 9;
    }
  } @else if $type == frame {
    & > .layer-0 {
      @if $hue == primary {
        background-color: rgba(variables.$color-primary-zeta, 30%);
      } @else if $hue == secondary {
        background-color: rgba(variables.$color-secondary-zeta, 30%);
      } @else if $hue == tertiary {
        background-color: rgba(variables.$color-tertiary-zeta, 30%);
      }

      border-radius: 5rem;
      filter: blur(1.17rem);
      z-index: 4;
    }

    & > .layer-1 {
      @if $hue == primary {
        border: solid 1.58rem variables.$color-primary-beta;
      } @else if $hue == secondary {
        border: solid 1.58rem variables.$color-secondary-beta;
      } @else if $hue == tertiary {
        border: solid 1.58rem variables.$color-tertiary-beta;
      }

      filter: blur(10.89rem);
      z-index: 5;
    }

    & > .layer-2 {
      @if $hue == primary {
        border: solid 2.06rem variables.$color-primary-alpha;
      } @else if $hue == secondary {
        border: solid 2.06rem variables.$color-secondary-alpha;
      } @else if $hue == tertiary {
        border: solid 2.06rem variables.$color-tertiary-alpha;
      }

      filter: blur(3.64rem);
      z-index: 6;
    }

    & > .layer-3 {
      @if $hue == primary {
        border: solid 1.58rem rgba(variables.$color-primary-epsilon, 20%);
        box-shadow: 0 3.64rem 4.73rem variables.$color-primary-gamma,
          0 1.58rem 1.21rem rgba(variables.$color-primary-delta, 70%);
      } @else if $hue == secondary {
        border: solid 1.58rem rgba(variables.$color-secondary-epsilon, 20%);
        box-shadow: 0 3.64rem 4.73rem variables.$color-secondary-gamma,
          0 1.58rem 1.21rem rgba(variables.$color-secondary-delta, 70%);
      } @else if $hue == tertiary {
        border: solid 1.48rem rgba(variables.$color-tertiary-epsilon, 20%);
        box-shadow: 0 3.64rem 4.73rem variables.$color-tertiary-gamma,
          0 1.58rem 1.21rem rgba(variables.$color-tertiary-delta, 70%);
      }

      z-index: 7;

      &::before {
        box-shadow: inset -0.18rem 0.32rem 0.18rem rgba(#fff, 50%);
      }
    }

    & > .layer-4 {
      @if $hue == primary {
        border: solid 0.97rem variables.$color-primary-epsilon;
      } @else if $hue == secondary {
        border: solid 0.97rem variables.$color-secondary-epsilon;
      } @else if $hue == tertiary {
        border: solid 0.97rem variables.$color-tertiary-epsilon;
      }

      filter: blur(0.24rem);
      z-index: 8;
    }

    & > .layer-5 {
      @if $hue == primary {
        border: solid 0.49rem #fff;
      } @else if $hue == secondary {
        border: solid 0.49rem #fff;
      } @else if $hue == tertiary {
        border: solid 0.49rem #fff;
      }

      filter: blur(0.16rem);
      z-index: 9;
    }

    @media only screen and (max-width: 1200px) {
      & > .layer-1 {
        border-width: 0.64rem !important;
      }

      & > .layer-2 {
        border-width: 0.83rem !important;
      }

      & > .layer-3 {
        border-width: 0.64rem !important;
      }

      & > .layer-4 {
        border-width: 0.4rem !important;
      }

      & > .layer-5 {
        border-width: 0.2rem !important;
        filter: blur(0.07rem) !important;
      }
    }
  } @else if $type == icon {
    .icon {
      fill: none;
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      transition: linear 0.3s;
    }

    .layer-0 {
      @if $hue == primary {
        background-color: rgba(variables.$color-primary-icon-eta, 30%);
      } @else if $hue == secondary {
        background-color: rgba(variables.$color-secondary-icon-eta, 30%);
      } @else if $hue == tertiary {
        background-color: rgba(variables.$color-tertiary-icon-eta, 30%);
      }

      filter: blur(0.38rem);
      z-index: 4;
    }

    .layer-1 {
      @if $hue == primary {
        stroke: variables.$color-primary-icon-zeta;
      } @else if $hue == secondary {
        stroke: variables.$color-secondary-icon-zeta;
      } @else if $hue == tertiary {
        stroke: variables.$color-tertiary-icon-zeta;
      }

      filter: blur(0.38rem);
      stroke-width: 1.1;
      z-index: 5;
    }

    .layer-2 {
      @if $hue == primary {
        stroke: variables.$color-primary-icon-epsilon;
      } @else if $hue == secondary {
        stroke: variables.$color-secondary-icon-epsilon;
      } @else if $hue == tertiary {
        stroke: variables.$color-tertiary-icon-epsilon;
      }

      filter: blur(0.2rem);
      stroke-width: 1.3;
      z-index: 6;
    }

    .layer-3 {
      @if $hue == primary {
        filter: drop-shadow(0 0.13rem 0.17rem variables.$color-primary-icon-gamma)
          drop-shadow(0 0.06rem 0.04rem rgba(variables.$color-primary-icon-delta, 70%));
        stroke: rgba(variables.$color-primary-icon-beta, 20%);
      } @else if $hue == secondary {
        filter: drop-shadow(0 0.13rem 0.17rem variables.$color-secondary-icon-gamma)
          drop-shadow(0 0.06rem 0.04rem rgba(variables.$color-secondary-icon-delta, 70%));
        stroke: rgba(variables.$color-secondary-icon-beta, 20%);
      } @else if $hue == tertiary {
        filter: drop-shadow(0 0.13rem 0.17rem variables.$color-tertiary-icon-gamma)
          drop-shadow(0 0.06rem 0.04rem rgba(variables.$color-tertiary-icon-delta, 70%));
        stroke: rgba(variables.$color-tertiary-icon-beta, 20%);
      }

      stroke-width: 1.1;
      z-index: 7;

      &::before {
        filter: drop-shadow(inset -0.02rem 0.02rem 0.01rem rgba(#fff, 50%));
      }
    }

    .layer-4 {
      @if $hue == primary or tertiary {
        stroke: variables.$color-primary-icon-alpha;
      } @else if $hue == secondary {
        stroke: variables.$color-secondary-icon-alpha;
      } @else if $hue == tertiary {
        stroke: variables.$color-tertiary-icon-alpha;
      }

      filter: blur(0.01rem);
      stroke-width: 0.88;
      z-index: 8;
    }

    .layer-5 {
      filter: blur(0.01rem);
      stroke: #fff;
      stroke-width: 4.5;
      z-index: 9;
    }
  } @else if $type == strip {
    & > .layer-0 {
      @if $hue == primary {
        background-color: rgba(variables.$color-primary-zeta, 30%);
      } @else if $hue == secondary {
        background-color: rgba(variables.$color-secondary-zeta, 30%);
      } @else if $hue == tertiary {
        background-color: rgba(variables.$color-tertiary-zeta, 30%);
      }

      border-radius: 5rem;
      filter: blur(4.47rem);
      z-index: 4;
    }

    & > .layer-1 {
      @if $hue == primary {
        border-top: solid 0.64rem variables.$color-primary-beta;
      } @else if $hue == secondary {
        border-top: solid 0.64rem variables.$color-secondary-beta;
      } @else if $hue == tertiary {
        border-top: solid 0.64rem variables.$color-tertiary-beta;
      }

      filter: blur(4.47rem);
      z-index: 1;
    }

    & > .layer-2 {
      @if $hue == primary {
        border-top: solid 0.83rem variables.$color-primary-alpha;
      } @else if $hue == secondary {
        border-top: solid 0.83rem variables.$color-secondary-alpha;
      } @else if $hue == tertiary {
        border-top: solid 0.83rem variables.$color-tertiary-alpha;
      }

      filter: blur(1.49rem);
      z-index: 2;
    }

    & > .layer-3 {
      @if $hue == primary {
        border-top: solid 0.64rem rgba(variables.$color-primary-epsilon, 20%);
        box-shadow: 0 0 1.94rem variables.$color-primary-gamma, 0 0 0.6rem rgba(variables.$color-primary-delta, 70%);
      } @else if $hue == secondary {
        border-top: solid 0.64rem rgba(variables.$color-secondary-epsilon, 20%);
        box-shadow: 0 0 1.94rem variables.$color-secondary-gamma, 0 0 0.6rem rgba(variables.$color-secondary-delta, 70%);
      } @else if $hue == tertiary {
        border-top: solid 0.64rem rgba(variables.$color-tertiary-epsilon, 20%);
        box-shadow: 0 0 1.94rem variables.$color-tertiary-gamma, 0 0 0.6rem rgba(variables.$color-tertiary-delta, 70%);
      }

      z-index: 3;

      &::before {
        box-shadow: inset 0 0 0.06rem rgba(#fff, 50%);
      }
    }

    & > .layer-4 {
      @if $hue == primary {
        border-top: solid 0.4rem variables.$color-primary-epsilon;
      } @else if $hue == secondary {
        border-top: solid 0.4rem variables.$color-secondary-epsilon;
      } @else if $hue == tertiary {
        border-top: solid 0.4rem variables.$color-tertiary-epsilon;
      }

      filter: blur(0.4rem);
      z-index: 4;
    }

    & > .layer-5 {
      @if $hue == primary {
        border-top: solid 0.2rem #fff;
      } @else if $hue == secondary {
        border-top: solid 0.2rem #fff;
      } @else if $hue == tertiary {
        border-top: solid 0.2rem #fff;
      }

      filter: blur(0.07rem);
      z-index: 5;
    }
  } @else if $type == text {
    background-color: rgba(variables.$color-neutral-dark, 20%);

    span {
      @include text-style-stroke;
    }

    .layer-0 {
      color: variables.$color-neutral-light;
      -webkit-text-stroke: 0 !important;
      z-index: 4;
    }

    .layer-1 {
      @if $hue == primary {
        filter: blur(1.32rem);
        background-color: rgba(variables.$color-primary-zeta, 30%);
      } @else if $hue == secondary {
        filter: blur(1.58rem);
        background-color: rgba(variables.$color-secondary-zeta, 30%);
      } @else if $hue == tertiary {
        filter: blur(1.23rem);
        background-color: rgba(variables.$color-tertiary-zeta, 30%);
      }

      border-radius: 5rem;
      z-index: 5;
    }

    .layer-2 {
      @if $hue == primary {
        filter: blur(1.32rem);
        -webkit-text-stroke: 0.22rem variables.$color-primary-epsilon;
      } @else if $hue == secondary {
        filter: blur(1.71rem);
        -webkit-text-stroke: 0.22rem variables.$color-secondary-epsilon;
      } @else if $hue == tertiary {
        filter: blur(1.23rem);
        -webkit-text-stroke: 0.18rem variables.$color-tertiary-epsilon;
      }

      z-index: 6;
    }

    .layer-3 {
      @if $hue == primary {
        filter: blur(0.44rem);
        -webkit-text-stroke: 0.31rem variables.$color-primary-epsilon;
      } @else if $hue == secondary {
        filter: blur(0.57rem);
        -webkit-text-stroke: 0.31rem variables.$color-secondary-epsilon;
      } @else if $hue == tertiary {
        filter: blur(0.41rem);
        -webkit-text-stroke: 0.23rem variables.$color-tertiary-epsilon;
      }

      z-index: 7;
    }

    .layer-4 {
      @if $hue == primary {
        text-shadow: -0.02rem 0.04rem 0.02rem rgba(#fff, 50%), 0 0.44rem 0.69rem variables.$color-primary-gamma,
          0 0.19rem 0.15rem rgba(variables.$color-primary-delta, 70%);
        -webkit-text-stroke: 0.21rem rgba(variables.$color-primary-beta, 20%);
      } @else if $hue == secondary {
        text-shadow: -0.03rem 0.05rem 0.03rem rgba(#fff, 50%), 0 0.53rem 0.69rem variables.$color-secondary-gamma,
          0 0.23rem 0.18rem rgba(variables.$color-secondary-delta, 70%);
        -webkit-text-stroke: 0.22rem rgba(variables.$color-secondary-beta, 20%);
      } @else if $hue == tertiary {
        text-shadow: -0.02rem 0.04rem 0.02rem rgba(#fff, 50%), 0 0.41rem 0.53rem variables.$color-tertiary-gamma,
          0 0.18rem 0.14rem rgba(variables.$color-tertiary-delta, 70%);
        -webkit-text-stroke: 0.18rem rgba(variables.$color-tertiary-beta, 20%);
      }

      z-index: 8;
    }

    .layer-5 {
      @if $hue == primary {
        filter: blur(0.44rem);
        -webkit-text-stroke: 0.31rem variables.$color-primary-alpha;
      } @else if $hue == secondary {
        filter: blur(0.2rem);
        -webkit-text-stroke: 0.31rem variables.$color-secondary-alpha;
      } @else if $hue == tertiary {
        filter: blur(0.41rem);
        -webkit-text-stroke: 0.23rem variables.$color-tertiary-alpha;
      }

      z-index: 9;
    }
  }
}

@mixin text-style-cta {
  color: variables.$color-neutral-light;
  font-family: variables.$font-cta;
  font-size: 1.5rem;
  padding: 0.2em 0.3em;
  position: absolute;
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;
  top: 50%;
  transform: translateY(-50%);
  transition: linear 0.3s;

  @media only screen and (min-width: 601px) and (max-width: 1200px) {
    font-size: 1.35rem;
  }

  @media only screen and (max-width: 600px) {
    font-size: 1rem;
  }
}

@mixin text-style-stroke {
  color: transparent;
  position: absolute;
  text-transform: uppercase;
  transform: translateY(-50%);
  transition: linear 0.3s;
  z-index: 10;
  -webkit-font-smoothing: antialiased;
}
